Для концептуального описания передачи данных через сеть связи зачастую используется модель OSI - Open Systems Interconnection model - 
 - Модель взаимодействия открытых систем. Это концептуальная модель удалённой передачи данных, созданная в конце 1970-х. Как правило, в чистом виде она 
 не используется на практике, а применяется скорее для описания происходящего в сети. Модель OSI является 7-уровневой и включает следующие уровни (по возрастанию):
 1 - Физический (биты) (USB...) (Сетевое оборудование)
 2 - Канальный (фреймы) (PPP, IEEE...) (Endpoints, коммутаторы)
 3 - Сетевой (пакеты) (IPv4, IPv6...) (маршрутизаторы)
 4 - Транспортный (сегменты, датаграммы) (TCP, UDP) (хосты, межсетевые экраны)
 5 - Сеансовый (данные) (RPC, gRPC...) (хосты, межсетевые экраны)
 6 - уровень Представлений (данные) (ASCII, SSL...) (хосты, межсетевые экраны)
 7 - уровень Приложений (данные) (HTTP, HTTPS, FTP...) (хосты, межсетевые экраны)
 При передаче данных с одного устройства на другое сначала происходит их поуровневая нисходящая инкапсуляция и преобразование данных в конечном итоге в биты на физическом уровне,
 а затем также поуровневая восходящая декапсуляция с преобразованием данных в "человекочитаемый" вид на уровне приложений.

 Для программной и аппаратной практической реализации связи между устройствами и передачи данных между ними используется стек протоколов TCP/IP - 
  - Transmission Control Protocol/Internet Protocol - протокол упраления передачей/интернет протокол. Данный стек протоколов был разработан примерно в те же сроки,
 что и модель OSI. Однако он был практически реализован раньше, был ближе к реалиям и получил большую поддержку.
 В рамках TCP/IP TCP отвечает за данные, управляет их отправкой и следит, чтобы данные были доставлены получателю. IP отвечает за связь между устройствами и
 разбиение информации на пакеты. Протокол TCP/IP 4-уровневый и включает следующие (по возрастанию) уровни:
 1 - Уровень сетевого доступа или канальный уровень (соответствует физическому и канальному уровням OSI)
 2 - Уровень сети интернет (соответствует сетевому уровню OSI)
 3 - Транспортный уровень (соответствует транспортному уровню OSI)
 4 - Уровень приложений (соответствует сеансовому, представлений, приложений уровням OSI)

Также существует множество иных протоколов передачи данных, типа UDP - передача датаграмм, FTP - передача файлов и т.д. В рамках осуществления запросов в Python
 нам в первую очередь интересны следующие:
HTTP - hyper text transfer protocol - протокол передачи гипертекста прикладного уровня (по OSI).
HTTPS - HTTP с поддержкой шифрования.
Передача данных осуществляется при помощи запросов на сервер - requests и получения ответов от сервера - responses.

Структура HTTP запроса:

GET/URI/HTTP/1.1
HOST: date.org

или

ТИП ЗАПРОСА/Идентификатор запроса/Используемая версия протокола HTTP
Домен, на котором находится ресурс

Структура HTTP ответа:

HTTP/1.1 200 OK
Content-Type: application/json
<Body response>

или

Используемая версия протокола HTTP/Статус-код HTTP ответа
Headers (к примеру тип возвращаемого контента, информация о запросе и т.д.)
<Тело ответа>

Для того, чтобы запрос направлялся к какому-либо конкретному ресурсу, необходимо указать идентификатор этого ресурса - URI.
URI - Uniform Resourse Identifier - Унифицированный Идентификатор Ресурса
URL - Uniform Resourse Locator - Унифицированное Расположение Ресурса 
URN - Uniform Resourse Name - Унифицированное Имя Ресурса
URL и URN - разновидности URI.
Структура URI - это протокол формирования URI и в него входят:
1 - схема. Говорит о том, каким именно образом получить доступ к ресурсу. Прмеры: HTTP, FTP...
2 - домен. Уникальное имя ресурса.
3 - путь. Показывает, где именно на сервере расположен искомый ресурс.
4 - запрос - может включать дополнительные параметры.
5 - фрагмент - может включать дополнительные параметры.

Основные типы запросов:
GET - запрашивает представление ресурса. С помощью этого метода можно только получать данные.
POST - используется для отправки некоторых сущностей к определённому ресурсу. Часто вызывает некие изменения или побочные эффекты на сервере.
HEAD - запрашивает ресурс так же, как метод GET, но без тела ответа.
PUT - заменяет все текущие представления данными запроса.
DELETE - удаляет указанный запрос.
CONNECT - устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS - используется для описания параметров соединения с ресурсом.
TRACE - выполняет вызов возвращаемого тестового сообщения с ресурса.
PATCH - используется для частичного изменения ресурса.

Типы запросов можно классифицировать в том числе и по идемпотентности.
Идемпотентность (применительно к запросам) - это свойство, которое означает, что повторный идентичный запрос, сделанный один или несколько
раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
К примеру, корректно реализованные методы GET, PUT, DELETE - идемпотентны. POST - нет.
Классификация по кэшированию - GET и POST могут быть кэшируемыми, PUT и DELETE - нет.


HTTP статус-коды:
1хх - информационные
2хх - успешные
3хх - перенаправление
4хх - ошибка клиента
5хх - ошибка сервера

В Python для работы с запросами можно использовать встроенный модуль urlib, содержащий 4 подмодуля:
1 - request - работа с URL-запросами
2 - erorr - работа с исключениями
3 - parse - анализ URL-адресов
4 - robotparser - анализ robots.txt файлов

Однако на практике зачастую используется устанавливаемая библиотека requests, которая работает c использованием urlib.
Библиотека requests 