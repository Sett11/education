"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API kad.arbitr.ru
"""
import os
import requests
import json
import pytest
import copy
from config.settings import SEARCH_REQUEST_CONFIG, URLS

# –ó–∞–≥–æ–ª–æ–≤–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
SENSITIVE_HEADERS = {
    'authorization', 'cookie', 'set-cookie', 'x-api-key', 'x-auth-token',
    'x-access-token', 'x-csrf-token', 'x-session-token', 'bearer'
}

def redact_header(name, value):
    """
    –°–∫—Ä—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    name_lower = name.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    is_sensitive = any(sensitive in name_lower for sensitive in SENSITIVE_HEADERS)
    
    if is_sensitive:
        return "***redacted***"
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ ~80 —Å–∏–º–≤–æ–ª–æ–≤
    if isinstance(value, str) and len(value) > 80:
        return value[:77] + "..."
    
    return value

@pytest.mark.skipif(
    os.getenv("KAD_SMOKE") != "1",
    reason="–¢–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç KAD_SMOKE=1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ CI)"
)
def test_kad_arbitr_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API kad.arbitr.ru"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API kad.arbitr.ru")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    endpoint = URLS["search_endpoint"]
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint: {endpoint}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    headers = copy.deepcopy(SEARCH_REQUEST_CONFIG["headers"])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_data = copy.deepcopy(SEARCH_REQUEST_CONFIG["json_template"])
    test_data.update({
        "Count": 5,
        "Page": 1,
        "DateFrom": "2024-01-01",
        "DateTo": "2024-01-31"
    })
    
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:")
    for key, value in headers.items():
        print(f"   {key}: {redact_header(key, value)}")
    
    print(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    try:
        response = requests.post(endpoint, json=test_data, headers=headers, timeout=10)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
        for key, value in response.headers.items():
            print(f"      {key}: {redact_header(key, value)}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   ‚úÖ JSON –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                print(f"   –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
                
                # –ò—â–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                documents_found = False
                for key in ['items', 'documents', 'results', 'data']:
                    if key in data and isinstance(data[key], list):
                        print(f"   üìÑ –ù–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–æ–ª–µ '{key}': {len(data[key])} —à—Ç.")
                        if data[key]:
                            print(f"   –ü—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {list(data[key][0].keys())}")
                        documents_found = True
                        break
                
                # Assert —á—Ç–æ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω
                assert documents_found, "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ"
                    
            except json.JSONDecodeError as e:
                pytest.fail(f"–ù–µ JSON –æ—Ç–≤–µ—Ç: {response.text[:200]}")
        elif response.status_code == 403:
            pytest.xfail("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - anti-bot –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        elif response.status_code == 429:
            pytest.xfail("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429) - rate limiting")
        else:
            pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status_code}: {response.text[:200]}")
            
    except Exception as e:
        pytest.fail(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º anti-bot –∑–∞—â–∏—Ç—É
    print(f"\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ anti-bot –∑–∞—â–∏—Ç—ã:")
    if SEARCH_REQUEST_CONFIG.get("requires_wasm_token", False):
        print(f"   ‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç WASM —Ç–æ–∫–µ–Ω")
        print(f"   ‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ cookies: {SEARCH_REQUEST_CONFIG.get('required_cookies', [])}")
        print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"      - –°–æ–±–ª—é–¥–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞")
        print(f"      - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞")
        print(f"      - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å–∞–π—Ç–∞ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
    
    print("\n" + "=" * 50)
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ JSON —Å—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö cookies")
    print("3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ anti-bot")
    print("4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ cookies")

@pytest.mark.skipif(
    os.getenv("KAD_SMOKE") != "1",
    reason="–¢–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç KAD_SMOKE=1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ CI)"
)
def test_endpoint_with_proper_headers():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å—Ö–µ–º–æ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    session = requests.Session()
    session.headers.update(SEARCH_REQUEST_CONFIG["headers"])
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    test_data = copy.deepcopy(SEARCH_REQUEST_CONFIG["json_template"])
    test_data.update({
        "Count": 3,
        "Page": 1,
        "DateFrom": "2024-01-01",
        "DateTo": "2024-01-31"
    })
    
    print(f"üîó Endpoint: {URLS['search_endpoint']}")
    print(f"üìã –ú–µ—Ç–æ–¥: {SEARCH_REQUEST_CONFIG['method']}")
    print(f"üìã Content-Type: {SEARCH_REQUEST_CONFIG['headers']['Content-Type']}")
    print(f"üìã User-Agent: {SEARCH_REQUEST_CONFIG['headers']['User-Agent'][:50]}...")
    print(f"üìã Origin: {SEARCH_REQUEST_CONFIG['headers']['Origin']}")
    print(f"üìã Referer: {SEARCH_REQUEST_CONFIG['headers']['Referer']}")
    
    print(f"\nüìã JSON Payload:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º anti-bot –∑–∞—â–∏—Ç—É
    print(f"\nüõ°Ô∏è Anti-bot –∑–∞—â–∏—Ç–∞:")
    print(f"   –¢—Ä–µ–±—É–µ—Ç WASM —Ç–æ–∫–µ–Ω: {SEARCH_REQUEST_CONFIG.get('requires_wasm_token', False)}")
    print(f"   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ cookies: {SEARCH_REQUEST_CONFIG.get('required_cookies', [])}")
    
    if SEARCH_REQUEST_CONFIG.get("requires_wasm_token", False):
        print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ö–æ–¥–∞ anti-bot –∑–∞—â–∏—Ç—ã!")
        print(f"   ‚ö†Ô∏è –ë–µ–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö cookies –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    try:
        response = session.post(
            URLS["search_endpoint"],
            json=test_data,
            timeout=15
        )
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   Content-Type: {redact_header('Content-Type', response.headers.get('Content-Type', 'N/A'))}")
        print(f"   Content-Length: {redact_header('Content-Length', response.headers.get('Content-Length', 'N/A'))}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç")
                print(f"   üìÑ –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                documents_found = False
                for key in ['items', 'documents', 'results', 'data']:
                    if key in data and isinstance(data[key], list):
                        print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ '{key}': {len(data[key])} —à—Ç.")
                        if data[key]:
                            print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞: {list(data[key][0].keys())}")
                        documents_found = True
                        break
                
                # Assert —á—Ç–æ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω
                assert documents_found, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                    
            except json.JSONDecodeError as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}. –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}")
                
        elif response.status_code == 403:
            pytest.xfail("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - anti-bot –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        elif response.status_code == 429:
            pytest.xfail("Rate limiting (429) - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
        else:
            pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}. –û—Ç–≤–µ—Ç: {response.text[:200]}")
            
    except requests.exceptions.Timeout:
        pytest.fail("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
    except requests.exceptions.ConnectionError:
        pytest.fail("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    except Exception as e:
        pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üí° –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
    print("1. –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π JSON —Å—Ö–µ–º–æ–π")
    print("2. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    print("3. Anti-bot –∑–∞—â–∏—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ cookies")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API kad.arbitr.ru")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Ç–µ—Å—Ç–∞
    test_kad_arbitr_api()
    print("\n" + "=" * 60)
    test_endpoint_with_proper_headers()
