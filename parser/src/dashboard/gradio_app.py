"""
–ü—Ä–æ—Å—Ç–æ–π Gradio –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º
"""
import gradio as gr
import importlib
import json
import os
import sys
from datetime import datetime, timedelta

def safe_import(module_paths, item_name=None):
    """
    –£—Å—Ç–æ–π—á–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å fallback –ª–æ–≥–∏–∫–æ–π
    
    Args:
        module_paths: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        item_name: –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –º–æ–¥—É–ª—è (–µ—Å–ª–∏ None, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤–µ—Å—å –º–æ–¥—É–ª—å)
    
    Returns:
        –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    """
    for module_path in module_paths:
        try:
            module = importlib.import_module(module_path)
            return getattr(module, item_name) if item_name else module
        except ImportError:
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    if project_root not in sys.path:
        sys.path.insert(0, project_root)
    
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
    try:
        module = importlib.import_module(module_paths[-1])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Ç—å –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
        return getattr(module, item_name) if item_name else module
    except ImportError:
        raise ImportError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module_paths[-1]} –¥–∞–∂–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {project_root} –≤ sys.path")

# –£—Å—Ç–æ–π—á–∏–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã - —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–∫ –ø–∞–∫–µ—Ç–∞, —Ç–∞–∫ –∏ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞
create_batch_parser = safe_import(
    ["src.core.batch_parser", "..core.batch_parser"],
    "create_batch_parser"
)

create_puppeteer_batch_parser = safe_import(
    ["src.core.puppeteer_batch_parser", "..core.puppeteer_batch_parser"],
    "create_puppeteer_batch_parser"
)

create_cookie_automation = safe_import(
    ["src.core.cookie_automation", "..core.cookie_automation"],
    "create_cookie_automation"
)

cookie_manager = safe_import(
    ["src.utils.cookie_manager", "..utils.cookie_manager"],
    "cookie_manager"
)

date_manager = safe_import(
    ["src.utils.date_manager", "..utils.date_manager"],
    "date_manager"
)

settings_module = safe_import(
    ["config.settings", "...config.settings"]
)
DOCS_DIR = settings_module.DOCS_DIR
LOGS_DIR = settings_module.LOGS_DIR

def get_server_name():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–µ—Ñ–æ–ª—Ç–æ–º
    
    Returns:
        str: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (127.0.0.1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    """
    server_name = os.environ.get('GRADIO_SERVER_NAME', '127.0.0.1')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    if not server_name or not isinstance(server_name, str):
        server_name = '127.0.0.1'
    
    server_name = server_name.strip()
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if server_name == '0.0.0.0':
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ 0.0.0.0 - –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –ø—Ä–æ–∫—Å–∏)")
    
    return server_name

class GradioDashboard:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    def __init__(self):
        self.parser = None
        self.parser_type = "puppeteer"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Puppeteer
        self.cookie_automation = create_cookie_automation()
        self.initialize_parser()
    
    def initialize_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            if self.parser_type == "puppeteer":
                self.parser = create_puppeteer_batch_parser()
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
                if not self.parser.initialize():
                    print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Puppeteer, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ requests")
                    self.parser_type = "requests"
                    self.parser = create_batch_parser()
            else:
                self.parser = create_batch_parser()
                
            print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.parser_type}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            # Fallback –Ω–∞ requests –ø–∞—Ä—Å–µ—Ä
            self.parser_type = "requests"
            self.parser = create_batch_parser()
    
    def start_parsing(self, start_date, end_date, cookies_text):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies
            if cookies_text.strip():
                cookies_dict = json.loads(cookies_text)
                cookie_manager.save_cookies(cookies_dict)
                self.parser.set_cookies(cookies_dict)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            if cookie_manager.load_cookies():
                self.parser.set_cookies(cookie_manager.get_cookies())
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")
            
            if self.parser_type == "puppeteer":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Puppeteer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                total_downloaded = self.parser.process_date_range(
                    start_date, 
                    end_date, 
                    max_pages=40
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self.parser.save_metadata()
                
                stats = self.parser.get_stats()
                
                return f"""
                ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Puppeteer!
                
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                ‚Ä¢ –°–∫–∞—á–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_downloaded}
                ‚Ä¢ –ü–∞—Ä—Å–µ—Ä: {self.parser_type}
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats.get('is_initialized', False)}
                
                üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {DOCS_DIR}
                
                üöÄ Puppeteer —É—Å–ø–µ—à–Ω–æ –æ–±–æ—à–µ–ª anti-bot –∑–∞—â–∏—Ç—É!
                """
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π requests –ø–æ–¥—Ö–æ–¥
                date_ranges = date_manager.generate_date_ranges(start_dt, end_dt)
                
                results = []
                total_downloaded = 0
                
                for date_range in date_ranges:
                    result = self.parser.process_date_range(
                        date_range["start"], 
                        date_range["end"]
                    )
                    total_downloaded += result
                    results.append(f"–ü–µ—Ä–∏–æ–¥ {date_range['start'][:10]} - {date_range['end'][:10]}: {result} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self.parser.save_metadata()
                
                stats = self.parser.get_stats()
                
                return f"""
                ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ requests!
                
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                ‚Ä¢ –°–∫–∞—á–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_downloaded}
                ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['rate_limiter_status']['requests_made']}
                ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['rate_limiter_status']['remaining']}
                
                üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {DOCS_DIR}
                
                üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
                {chr(10).join(results)}
                """
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
            stats = self.parser.get_stats()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ docs
            docs_count = len([f for f in os.listdir(DOCS_DIR) if f.endswith('.pdf')]) if os.path.exists(DOCS_DIR) else 0
            
            # –°—Ç–∞—Ç—É—Å cookies
            cookies_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã" if cookie_manager.is_valid() else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            
            if self.parser_type == "puppeteer":
                return f"""
                üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (Puppeteer):
                
                üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã: {docs_count} PDF —Ñ–∞–π–ª–æ–≤
                üç™ Cookies: {cookies_status}
                üöÄ –ü–∞—Ä—Å–µ—Ä: Puppeteer —Å stealth –ø–ª–∞–≥–∏–Ω–æ–º
                üìà –°–∫–∞—á–∞–Ω–æ: {stats.get('downloaded_count', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {stats.get('is_initialized', False)}
                üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
                """
            else:
                return f"""
                üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (Requests):
                
                üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã: {docs_count} PDF —Ñ–∞–π–ª–æ–≤
                üç™ Cookies: {cookies_status}
                üöÄ –ü–∞—Ä—Å–µ—Ä: Requests
                üìà –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['rate_limiter_status']['requests_made']}/{stats['rate_limiter_status']['max_requests']}
                ‚è∞ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞: {stats['rate_limiter_status']['daily_reset'].strftime('%H:%M:%S')}
                """
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
    
    def load_cookies_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å cookies –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if file_path and os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    cookies = json.load(f)
                return json.dumps(cookies, ensure_ascii=False, indent=2)
            else:
                return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
    
    def auto_extract_cookies(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å cookies"""
        try:
            result = self.cookie_automation.extract_cookies(save_to_file=True)
            
            if result['success']:
                cookies_json = json.dumps(result['cookies'], ensure_ascii=False, indent=2)
                
                return f"""‚úÖ Cookies –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±—Ä–∞–Ω—ã!

üç™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ cookies: {result['validation']['foundCookies']}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö: {len(result['validation']['criticalCookies'])}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∞–ª–∏–¥–Ω—ã' if result['validation']['isValid'] else '‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'}

üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {DOCS_DIR}/auto_extracted_cookies.json

üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥!

{cookies_json}"""
            else:
                return f"""‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ cookies:

{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ kad.arbitr.ru –¥–æ—Å—Ç—É–ø–µ–Ω
3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"""
                
        except Exception as e:
            return f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    def create_interface(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        with gr.Blocks(title="–ü–∞—Ä—Å–µ—Ä –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –î–µ–ª") as interface:
            gr.Markdown("# üîç –ü–∞—Ä—Å–µ—Ä –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –î–µ–ª")
            gr.Markdown("–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å—É–¥–æ–≤")
            
            with gr.Row():
                with gr.Column(scale=1):
                    gr.Markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    start_date = gr.Textbox(
                        label="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)",
                        value=(datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d"),
                        placeholder="2024-01-01"
                    )
                    
                    end_date = gr.Textbox(
                        label="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)",
                        value=datetime.now().strftime("%Y-%m-%d"),
                        placeholder="2024-12-31"
                    )
                    
                    cookies_input = gr.Textbox(
                        label="Cookies (JSON —Ñ–æ—Ä–º–∞—Ç)",
                        placeholder='{"cookie_name": "cookie_value", ...}',
                        lines=5,
                        max_lines=10
                    )
                    
                    with gr.Row():
                        start_btn = gr.Button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", variant="primary")
                        stats_btn = gr.Button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    
                    with gr.Row():
                        auto_cookies_btn = gr.Button("üç™ –ê–≤—Ç–æ-—Å–±–æ—Ä cookies", variant="secondary")
                        clear_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", variant="stop")
                    
                    cookie_file = gr.File(
                        label="–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies –∏–∑ —Ñ–∞–π–ª–∞",
                        file_types=[".json"]
                    )
                
                with gr.Column(scale=2):
                    gr.Markdown("## üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    
                    output = gr.Textbox(
                        label="–í—ã–≤–æ–¥",
                        lines=15,
                        max_lines=20,
                        interactive=False
                    )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            start_btn.click(
                fn=self.start_parsing,
                inputs=[start_date, end_date, cookies_input],
                outputs=output
            )
            
            stats_btn.click(
                fn=self.get_stats,
                inputs=[],
                outputs=output
            )
            
            cookie_file.change(
                fn=self.load_cookies_from_file,
                inputs=[cookie_file],
                outputs=cookies_input
            )
            
            auto_cookies_btn.click(
                fn=self.auto_extract_cookies,
                inputs=[],
                outputs=cookies_input
            )
            
            clear_btn.click(
                fn=lambda: "",
                inputs=[],
                outputs=cookies_input
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            gr.Markdown("""
            ## ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
            **üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä cookies:**
            - –ù–∞–∂–º–∏—Ç–µ "üç™ –ê–≤—Ç–æ-—Å–±–æ—Ä cookies" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö cookies
            - Puppeteer –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ–π–¥–µ—Ç anti-bot –∑–∞—â–∏—Ç—É
            - Cookies –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            
            **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            - –ú–∞–∫—Å–∏–º—É–º 500 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
            - 25 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            
            **–§–∏–ª—å—Ç—Ä—ã:**
            - ‚úÖ –í–∫–ª—é—á–∞–µ–º: —Ä–µ—à–µ–Ω–∏—è, –∫–∞—Å—Å–∞—Ü–∏–∏, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            - ‚ùå –ò—Å–∫–ª—é—á–∞–µ–º: –ø–µ—Ä–µ–Ω–æ—Å—ã, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            
            ## üç™ –†—É—á–Ω–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è Cookies (–µ—Å–ª–∏ –∞–≤—Ç–æ-—Å–±–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç):
            
            1. –û—Ç–∫—Ä–æ–π—Ç–µ https://kad.arbitr.ru –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            2. –û—Ç–∫—Ä–æ–π—Ç–µ Developer Tools (F12)
            3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Application/Storage ‚Üí Cookies
            4. –ù–∞–π–¥–∏—Ç–µ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô** cookie: `pr_fp`
            5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            ```json
            {
                "pr_fp": "–∑–Ω–∞—á–µ–Ω–∏–µ_–∏–∑_–±—Ä–∞—É–∑–µ—Ä–∞"
            }
            ```
            
            **‚ö†Ô∏è –í–∞–∂–Ω–æ:** 
            - üöÄ **–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä cookies!
            - –ë–µ–∑ `pr_fp` –ø–∞—Ä—Å–∏–Ω–≥ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!
            - Cookies —Ä–∞–±–æ—Ç–∞—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞—Ç–µ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å!
            - –î—Ä—É–≥–∏–µ cookies (`wasm`, `PHPSESSID` –∏ —Ç.–¥.) –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
            """)
        
        return interface
    
    def launch(self, share=False, port=7860):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"""
        interface = self.create_interface()
        server_name = get_server_name()
        interface.launch(share=share, server_port=port, server_name=server_name)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == "__main__":
    dashboard = GradioDashboard()
    dashboard.launch()
