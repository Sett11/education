"""
–ü—Ä–æ—Å—Ç–æ–π Gradio –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º
"""
import gradio as gr
import json
import os
import sys
from datetime import datetime, timedelta

# –£—Å—Ç–æ–π—á–∏–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã - —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–∫ –ø–∞–∫–µ—Ç–∞, —Ç–∞–∫ –∏ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞
try:
    from src.core.batch_parser import create_batch_parser
except ImportError:
    try:
        from ..core.batch_parser import create_batch_parser
    except ImportError:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
        if project_root not in sys.path:
            sys.path.insert(0, project_root)
        from src.core.batch_parser import create_batch_parser

try:
    from src.utils.cookie_manager import cookie_manager
except ImportError:
    try:
        from ..utils.cookie_manager import cookie_manager
    except ImportError:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
        if project_root not in sys.path:
            sys.path.insert(0, project_root)
        from src.utils.cookie_manager import cookie_manager

try:
    from src.utils.date_manager import date_manager
except ImportError:
    try:
        from ..utils.date_manager import date_manager
    except ImportError:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
        if project_root not in sys.path:
            sys.path.insert(0, project_root)
        from src.utils.date_manager import date_manager

try:
    from config.settings import DOCS_DIR, LOGS_DIR
except ImportError:
    try:
        from ...config.settings import DOCS_DIR, LOGS_DIR
    except ImportError:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
        if project_root not in sys.path:
            sys.path.insert(0, project_root)
        from config.settings import DOCS_DIR, LOGS_DIR

class GradioDashboard:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    def __init__(self):
        self.parser = create_batch_parser()
    
    def start_parsing(self, start_date, end_date, cookies_text):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies
            if cookies_text.strip():
                cookies_dict = json.loads(cookies_text)
                cookie_manager.save_cookies(cookies_dict)
                self.parser.set_cookies(cookies_dict)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            if cookie_manager.load_cookies():
                self.parser.set_cookies(cookie_manager.get_cookies())
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
            date_ranges = date_manager.generate_date_ranges(start_dt, end_dt)
            
            results = []
            total_downloaded = 0
            
            for date_range in date_ranges:
                result = self.parser.process_date_range(
                    date_range["start"], 
                    date_range["end"]
                )
                total_downloaded += result
                results.append(f"–ü–µ—Ä–∏–æ–¥ {date_range['start'][:10]} - {date_range['end'][:10]}: {result} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self.parser.save_metadata()
            
            stats = self.parser.get_stats()
            
            return f"""
            ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!
            
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
            ‚Ä¢ –°–∫–∞—á–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_downloaded}
            ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['rate_limiter_status']['requests_made']}
            ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['rate_limiter_status']['remaining']}
            
            üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {DOCS_DIR}
            
            üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
            {chr(10).join(results)}
            """
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
            stats = self.parser.get_stats()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ docs
            docs_count = len([f for f in os.listdir(DOCS_DIR) if f.endswith('.pdf')]) if os.path.exists(DOCS_DIR) else 0
            
            # –°—Ç–∞—Ç—É—Å cookies
            cookies_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã" if cookie_manager.is_valid() else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            
            return f"""
            üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
            
            üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã: {docs_count} PDF —Ñ–∞–π–ª–æ–≤
            üç™ Cookies: {cookies_status}
            üìà –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['rate_limiter_status']['requests_made']}/{stats['rate_limiter_status']['max_requests']}
            ‚è∞ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞: {stats['rate_limiter_status']['daily_reset'].strftime('%H:%M:%S')}
            """
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
    
    def load_cookies_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å cookies –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if file_path and os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    cookies = json.load(f)
                return json.dumps(cookies, ensure_ascii=False, indent=2)
            else:
                return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
    
    def create_interface(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        with gr.Blocks(title="–ü–∞—Ä—Å–µ—Ä –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –î–µ–ª") as interface:
            gr.Markdown("# üîç –ü–∞—Ä—Å–µ—Ä –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –î–µ–ª")
            gr.Markdown("–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å—É–¥–æ–≤")
            
            with gr.Row():
                with gr.Column(scale=1):
                    gr.Markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    start_date = gr.Textbox(
                        label="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)",
                        value=(datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d"),
                        placeholder="2024-01-01"
                    )
                    
                    end_date = gr.Textbox(
                        label="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)",
                        value=datetime.now().strftime("%Y-%m-%d"),
                        placeholder="2024-12-31"
                    )
                    
                    cookies_input = gr.Textbox(
                        label="Cookies (JSON —Ñ–æ—Ä–º–∞—Ç)",
                        placeholder='{"cookie_name": "cookie_value", ...}',
                        lines=5,
                        max_lines=10
                    )
                    
                    with gr.Row():
                        start_btn = gr.Button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", variant="primary")
                        stats_btn = gr.Button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    
                    cookie_file = gr.File(
                        label="–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies –∏–∑ —Ñ–∞–π–ª–∞",
                        file_types=[".json"]
                    )
                
                with gr.Column(scale=2):
                    gr.Markdown("## üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    
                    output = gr.Textbox(
                        label="–í—ã–≤–æ–¥",
                        lines=15,
                        max_lines=20,
                        interactive=False
                    )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            start_btn.click(
                fn=self.start_parsing,
                inputs=[start_date, end_date, cookies_input],
                outputs=output
            )
            
            stats_btn.click(
                fn=self.get_stats,
                inputs=[],
                outputs=output
            )
            
            cookie_file.change(
                fn=self.load_cookies_from_file,
                inputs=[cookie_file],
                outputs=cookies_input
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            gr.Markdown("""
            ## ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
            **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            - –ú–∞–∫—Å–∏–º—É–º 500 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
            - 25 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            
            **–§–∏–ª—å—Ç—Ä—ã:**
            - ‚úÖ –í–∫–ª—é—á–∞–µ–º: —Ä–µ—à–µ–Ω–∏—è, –∫–∞—Å—Å–∞—Ü–∏–∏, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            - ‚ùå –ò—Å–∫–ª—é—á–∞–µ–º: –ø–µ—Ä–µ–Ω–æ—Å—ã, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            
            ## üç™ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Cookies:
            
            1. –û—Ç–∫—Ä–æ–π—Ç–µ https://kad.arbitr.ru –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            2. –û—Ç–∫—Ä–æ–π—Ç–µ Developer Tools (F12)
            3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Application/Storage ‚Üí Cookies
            4. –ù–∞–π–¥–∏—Ç–µ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô** cookie: `pr_fp`
            5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            ```json
            {
                "pr_fp": "–∑–Ω–∞—á–µ–Ω–∏–µ_–∏–∑_–±—Ä–∞—É–∑–µ—Ä–∞"
            }
            ```
            
            **‚ö†Ô∏è –í–∞–∂–Ω–æ:** 
            - –ë–µ–∑ `pr_fp` –ø–∞—Ä—Å–∏–Ω–≥ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!
            - Cookies —Ä–∞–±–æ—Ç–∞—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞—Ç–µ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å!
            - –î—Ä—É–≥–∏–µ cookies (`wasm`, `PHPSESSID` –∏ —Ç.–¥.) –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
            """)
        
        return interface
    
    def launch(self, share=False, port=7860):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"""
        interface = self.create_interface()
        interface.launch(share=share, server_port=port, server_name="0.0.0.0")

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == "__main__":
    dashboard = GradioDashboard()
    dashboard.launch()
