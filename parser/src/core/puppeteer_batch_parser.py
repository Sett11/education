"""
–ë–∞—Ç—á–µ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Puppeteer –¥–ª—è –æ–±—Ö–æ–¥–∞ anti-bot –∑–∞—â–∏—Ç—ã
"""
import json
import os
from datetime import datetime
from typing import Dict, List, Optional

from src.utils.logger import logger
from src.core.puppeteer_wrapper import PuppeteerWrapper
from config.settings import DOCS_DIR, ensure_dirs


class PuppeteerBatchParser:
    """–ë–∞—Ç—á–µ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Puppeteer –¥–ª—è –æ–±—Ö–æ–¥–∞ anti-bot –∑–∞—â–∏—Ç—ã"""
    
    def __init__(self):
        ensure_dirs()
        self.puppeteer = PuppeteerWrapper()
        self.downloaded_count = 0
        self.metadata = []
        self.is_initialized = False
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Puppeteer –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Puppeteer –ø–∞—Ä—Å–µ—Ä–∞...")
            
            if self.puppeteer.init_browser():
                self.is_initialized = True
                logger.info("‚úÖ Puppeteer –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Puppeteer –ø–∞—Ä—Å–µ—Ä–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Puppeteer –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
    
    def set_cookies(self, cookies_dict: Dict) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookies –¥–ª—è Puppeteer"""
        try:
            logger.info("üç™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies –≤ Puppeteer...")
            
            if not self.is_initialized:
                logger.error("‚ùå Puppeteer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞")
                return False
            
            return self.puppeteer.load_cookies(cookies_dict)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies: {e}")
            return False
    
    def search_documents(self, date_from: str, date_to: str, page: int = 1) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Puppeteer"""
        try:
            if not self.is_initialized:
                logger.error("‚ùå Puppeteer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {date_from} - {date_to}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            search_params = {
                "Page": page,
                "Count": 25,
                "Courts": [],
                "DateFrom": date_from,
                "DateTo": date_to,
                "Sides": [],
                "Judges": [],
                "CaseNumbers": [],
                "WithVKSInstances": False,
                "ReasonIds": [],
                "CaseTypeIds": [],
                "CaseCategoryIds": [],
                "InstanceIds": [],
                "RegionIds": [],
                "DateType": 0
            }
            
            result = self.puppeteer.search_documents(search_params)
            
            if result and result.get('data'):
                documents = result['data']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                return documents
            else:
                logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –ø—É—Å—Ç–∞—è")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def download_pdf(self, pdf_url: str, filename: str) -> bool:
        """–°–∫–∞—á–∞—Ç—å PDF —á–µ—Ä–µ–∑ Puppeteer"""
        try:
            if not self.is_initialized:
                logger.error("‚ùå Puppeteer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            logger.info(f"üìÑ –°–∫–∞—á–∏–≤–∞–µ–º PDF: {filename}")
            
            filepath = await self.puppeteer.download_pdf(pdf_url, filename)
            
            if filepath:
                self.downloaded_count += 1
                logger.info(f"‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: {filename}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF {filename}: {e}")
            return False
    
    def process_date_range(self, date_from: str, date_to: str, max_pages: int = 40) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —á–µ—Ä–µ–∑ Puppeteer"""
        try:
            if not self.is_initialized:
                logger.error("‚ùå Puppeteer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return 0
            
            logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {date_from} - {date_to}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Puppeteer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            results = self.puppeteer.process_date_range(date_from, date_to, max_pages)
            
            if results:
                self.downloaded_count = len(results)
                self.metadata = results
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∫–∞—á–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
                return len(results)
            else:
                logger.info("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–∫–∞—á–∞–Ω—ã")
                return 0
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {e}")
            return 0
    
    def save_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
        try:
            os.makedirs(DOCS_DIR, exist_ok=True)
            
            metadata_file = os.path.join(DOCS_DIR, "metadata.json")
            temp_file = os.path.join(DOCS_DIR, "metadata.json.tmp")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "processed_at": datetime.now().isoformat(),
                    "total_documents": self.downloaded_count,
                    "documents": self.metadata
                }, f, ensure_ascii=False, indent=2)
                f.flush()
                os.fsync(f.fileno())
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
            os.replace(temp_file, metadata_file)
            logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except OSError:
                pass
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = self.puppeteer.get_stats()
            stats.update({
                "downloaded_count": self.downloaded_count,
                "is_initialized": self.is_initialized
            })
            return stats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "downloaded_count": self.downloaded_count,
                "is_initialized": self.is_initialized,
                "error": str(e)
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.is_initialized:
                self.puppeteer.close_browser()
                self.is_initialized = False
                logger.info("üîí Puppeteer –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            self.close()
        except:
            pass


def create_puppeteer_batch_parser() -> PuppeteerBatchParser:
    """Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ PuppeteerBatchParser"""
    return PuppeteerBatchParser()
