"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä cookies —á–µ—Ä–µ–∑ Puppeteer
"""
import subprocess
import json
import os
import tempfile
from datetime import datetime
from typing import Dict, Optional

from config.settings import DOCS_DIR, LOGS_DIR
from src.utils.logger import logger


class CookieAutomation:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä cookies —Å kad.arbitr.ru —á–µ—Ä–µ–∑ Puppeteer
    """
    
    def __init__(self):
        self.script_path = os.path.join(os.path.dirname(__file__), 'cookie_extractor_main.js')
        self.extracted_cookies = {}
        
    def extract_cookies(self, save_to_file: bool = True) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å cookies —Å kad.arbitr.ru"""
        try:
            logger.info("üç™ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä cookies...")
            
            # –í—ã–∑—ã–≤–∞–µ–º JavaScript —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ cookies
            result = self._run_cookie_extraction()
            
            if result.get('success'):
                self.extracted_cookies = result.get('cookies', {})
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º cookies
                validation = self._validate_cookies()
                
                if validation['isValid']:
                    logger.info("‚úÖ Cookies —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    if save_to_file:
                        self._save_cookies_to_file()
                    
                    return {
                        'success': True,
                        'cookies': self.extracted_cookies,
                        'validation': validation,
                        'message': 'Cookies —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                    }
                else:
                    logger.warning("‚ö†Ô∏è Cookies —Å–æ–±—Ä–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
                    return {
                        'success': False,
                        'cookies': self.extracted_cookies,
                        'validation': validation,
                        'message': 'Cookies —Å–æ–±—Ä–∞–Ω—ã, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
                    }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ cookies: {result.get('error')}")
                return {
                    'success': False,
                    'error': result.get('error'),
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å cookies –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ cookies: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ cookies'
            }
    
    def get_cookies(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ cookies"""
        return self.extracted_cookies
    
    def _run_cookie_extraction(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ JavaScript —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∞ cookies"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
            cmd = ['node', self.script_path]
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä cookies...")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=120,  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
                cwd=os.path.dirname(self.script_path)
            )
            
            if result.returncode == 0:
                try:
                    return json.loads(result.stdout)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å cookies –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º cookies –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                    return self._extract_cookies_from_text(result.stdout)
            else:
                error_msg = result.stderr or result.stdout or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cookie extractor: {error_msg}")
                return {'success': False, 'error': error_msg}
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∞ cookies")
            return {'success': False, 'error': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cookie extractor: {e}")
            return {'success': False, 'error': str(e)}
    
    def _extract_cookies_from_text(self, text: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        try:
            # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON —Å cookies
            json_pattern = r'\{[^{}]*"[^"]*"[^{}]*\}'
            matches = re.findall(json_pattern, text)
            
            for match in matches:
                try:
                    data = json.loads(match)
                    if isinstance(data, dict) and any(key in data for key in ['pr_fp', 'wasm', 'PHPSESSID']):
                        return {'success': True, 'cookies': data}
                except json.JSONDecodeError:
                    continue
            
            return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞'}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è cookies –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def _validate_cookies(self) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö cookies"""
        validation = {
            'isValid': True,
            'errors': [],
            'warnings': [],
            'foundCookies': list(self.extracted_cookies.keys()),
            'criticalCookies': {}
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ cookies
        critical_cookies = {
            'pr_fp': '–û—Å–Ω–æ–≤–Ω–æ–π fingerprint cookie',
            'wasm': 'WebAssembly —Ç–æ–∫–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)',
            'PHPSESSID': 'PHP —Å–µ—Å—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)',
            'ASP.NET_SessionId': 'ASP.NET —Å–µ—Å—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)'
        }

        for cookie_name, description in critical_cookies.items():
            if self.extracted_cookies.get(cookie_name):
                validation['criticalCookies'][cookie_name] = {
                    'found': True,
                    'description': description,
                    'value': self.extracted_cookies[cookie_name][:20] + '...'
                }
            else:
                if cookie_name == 'pr_fp':
                    validation['isValid'] = False
                    validation['errors'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π cookie: {cookie_name} ({description})")
                else:
                    validation['warnings'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π cookie: {cookie_name} ({description})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies
        total_cookies = len(self.extracted_cookies)
        if total_cookies < 5:
            validation['warnings'].append(f"–ú–∞–ª–æ cookies ({total_cookies}), –≤–æ–∑–º–æ–∂–Ω–æ anti-bot –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        elif total_cookies > 50:
            validation['warnings'].append(f"–ú–Ω–æ–≥–æ cookies ({total_cookies}), –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ")

        return validation
    
    def _save_cookies_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(DOCS_DIR, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            cookies_file = os.path.join(DOCS_DIR, 'auto_extracted_cookies.json')
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(cookies_file):
                backup_file = os.path.join(DOCS_DIR, f'cookies_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
                os.rename(cookies_file, backup_file)
                logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è cookies: {backup_file}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ cookies
            with open(cookies_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'extracted_at': datetime.now().isoformat(),
                    'cookies': self.extracted_cookies,
                    'validation': self._validate_cookies()
                }, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {cookies_file}")
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
            compatibility_file = os.path.join(DOCS_DIR, 'cookies.json')
            with open(compatibility_file, 'w', encoding='utf-8') as f:
                json.dump(self.extracted_cookies, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {compatibility_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
    
    def is_cookies_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ cookies"""
        validation = self._validate_cookies()
        return validation['isValid'] and len(self.extracted_cookies) > 0
    
    def get_cookies_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ cookies"""
        if not self.extracted_cookies:
            return "‚ùå Cookies –Ω–µ —Å–æ–±—Ä–∞–Ω—ã"
        
        validation = self._validate_cookies()
        critical_count = len(validation['criticalCookies'])
        total_count = len(self.extracted_cookies)
        
        status = "‚úÖ –í–∞–ª–∏–¥–Ω—ã" if validation['isValid'] else "‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
        
        return f"""üç™ Cookies: {status}
üìä –í—Å–µ–≥–æ cookies: {total_count}
üîë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö: {critical_count}
‚è∞ –°–æ–±—Ä–∞–Ω—ã: {datetime.now().strftime('%H:%M:%S')}"""


def create_cookie_automation() -> CookieAutomation:
    """Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CookieAutomation"""
    return CookieAutomation()
