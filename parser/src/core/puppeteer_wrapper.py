"""
Python –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Puppeteer –ø–∞—Ä—Å–µ—Ä–∞
"""
import subprocess
import json
import os
import tempfile
from datetime import datetime
from typing import Dict, List, Optional

from config.settings import DOCS_DIR, LOGS_DIR
from src.utils.logger import logger


class PuppeteerWrapper:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ JavaScript Puppeteer –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ Python
    """
    
    def __init__(self):
        self.script_path = os.path.join(os.path.dirname(__file__), 'puppeteer_main.js')
        self.cookies_temp_file = None
        
    def _create_temp_cookies_file(self, cookies_dict: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å cookies"""
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
        json.dump(cookies_dict, temp_file, ensure_ascii=False, indent=2)
        temp_file.close()
        return temp_file.name
    
    def _cleanup_temp_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if self.cookies_temp_file and os.path.exists(self.cookies_temp_file):
            try:
                os.unlink(self.cookies_temp_file)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cookies: {e}")
    
    def init_browser(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Puppeteer –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            # –í—ã–∑—ã–≤–∞–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            result = self._run_js_command('init')
            
            if result.get('success'):
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {result.get('error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def load_cookies(self, cookies_dict: Dict) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies"""
        try:
            logger.info("üç™ –ó–∞–≥—Ä—É–∑–∫–∞ cookies –≤ Puppeteer...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å cookies
            self.cookies_temp_file = self._create_temp_cookies_file(cookies_dict)
            
            # –í—ã–∑—ã–≤–∞–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ cookies
            result = self._run_js_command('loadCookies', cookies_file=self.cookies_temp_file)
            
            if result.get('success'):
                logger.info("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {result.get('error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
        finally:
            self._cleanup_temp_files()
    
    def search_documents(self, search_params: Dict) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Puppeteer...")
            
            # –í—ã–∑—ã–≤–∞–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
            result = self._run_js_command('searchDocuments', params=search_params)
            
            if result.get('success'):
                logger.info("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result.get('data')
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result.get('error')}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return None
    
    def process_date_range(self, start_date: str, end_date: str, max_pages: int = 40) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
        try:
            logger.info(f"üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {start_date} - {end_date}")
            
            # –í—ã–∑—ã–≤–∞–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            result = self._run_js_command('processDateRange', 
                                        start_date=start_date, 
                                        end_date=end_date, 
                                        max_pages=max_pages)
            
            if result.get('success'):
                documents = result.get('data', [])
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
                return documents
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {result.get('error')}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {e}")
            return []
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            result = self._run_js_command('getStats')
            
            if result.get('success'):
                return result.get('data', {})
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result.get('error')}")
                return {'total_documents': 0, 'last_update': None}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_documents': 0, 'last_update': None}
    
    def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä...")
            result = self._run_js_command('close')
            
            if result.get('success'):
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {result.get('error')}")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        finally:
            self._cleanup_temp_files()
    
    def _run_js_command(self, command: str, **kwargs) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è JavaScript
            args = [command]
            
            for key, value in kwargs.items():
                if isinstance(value, (dict, list)):
                    # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
                    json.dump(value, temp_file, ensure_ascii=False, indent=2)
                    temp_file.close()
                    args.extend([f'--{key}', temp_file.name])
                else:
                    args.extend([f'--{key}', str(value)])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
            cmd = ['node', self.script_path] + args
            
            logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                cwd=os.path.dirname(self.script_path)
            )
            
            if result.returncode == 0:
                try:
                    return json.loads(result.stdout)
                except json.JSONDecodeError:
                    return {'success': True, 'data': result.stdout}
            else:
                error_msg = result.stderr or result.stdout or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript: {error_msg}")
                return {'success': False, 'error': error_msg}
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript –∫–æ–º–∞–Ω–¥—ã")
            return {'success': False, 'error': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {'success': False, 'error': str(e)}
