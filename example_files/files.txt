Файл - именованная область данных на носителе информации, используемая как базовый объект взаимодействия с данными.
Также файл определяется как файлоподобный объект или поток, то есть объект представляющий интерфейс доступа к некоему ресурсу.

Файлы в Python условно подразделяются на 2 типа: бинарные файлы и текстовые файлы.
Бинарные файлы в свою очередь подразделяются на необработанные (небуферизованные) и буферизованные.
Различие между текстовыми и бинарными файлами достаточно условно, так как в конечном итоге любой файл обрабатывается как бинарный.
Для работы с бинарными файлами в Python есть встроенные модули pickle и shelve.

К текстовым файлам также относятся файлы с раширениями html, xml, csv, json и тд. Для работы с ними в Python имеются встроенные модули:
html.parser, xml.etree.ElementTree, csv, json и тд. Также применяются устанавливаемые библиотеки.
Текстовый файл может быть прочитан как бинарный. Или как бинарный с декодированием, что и выполняется под капотом в текстовом режиме.

Основные операции по работе с файлами: создание, открытие, чтение, запись, перезапись, дозапись, закрытие.
Для работы с файловой системой по канону используется встроенная функция open.
Сигнатура функции open:

open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)

1-file. Первым аргументом функция принимает абсолютный или относительный путь к файлу (type str) или также может принимать файловый дескриптор.
Файловый дескриптор - это неотрицательное число, которое однозначно идентифицирует открытый файл в операционной системе, то есть что-то типа идентификатора файла.

2-mode. Для того, чтобы задать конкретную специфику работы с файлом, то есть режим работы, необходимо указать в функции open необязательный аргумент mode
(может быть указан как позиционный аргумент или аргумент ключевого слова, обычно как позиционный):
r - является значением по умолчанию и открывает файл только для чтения. Если указанный файл отсутствует, то выбрасывает ошибку FileNotFoundError.
w - открывает файл для записи, если файл не существует, то создаёт его, если же существует, то перезаписывает
x - просто создаёт пустой файл, если файл уже существует, то бросается исключение FileExistError
a - открывает файл для дозаписи в конец
t - символ текстового режима
b - символ бинарного режима
+ - модификатор, обозначающий чтение + запись
Ещё примеры использования mode:
rb - открывает бинарный файл только для чтения помещая указатель в начало файла (бинарный режим по умолчанию, аналог b)
r+ - открывает файл для чтения и записи, указатель помещается в начало файла
rb+ - открывает бинарный файл для чтения и записи, указатель помещается в начало файла
w+ - открывает файл для записи и чтения, если файл не существует - создаёт новый
wb - открывает файл в бинарном режиме для записи и чтения: перезаписывает существующий или создаёт новый
ab - открывает бинарный файл для добавления или создаёт новый (указатель находится в конце файла)
...

В Python различаются бинарный и текстовый ввод/вывод следующим образом: при чтении файла в бинарном режиме на вход подаётся объект bytes без какого-либо декодирования,
а при текстовом режиме на вход подаётся строка байтов, которые были сначала декодированы при помощи указанной кодировки.

3-encoding. Кодировка, в соответствии с которой следует декодировать файл. По умолчанию - None, то есть используется кодировка принятая в рамках операционной системы на конкретном устройстве.
Однако рекомендуется использовать utf-8. К примеру, без указания utf-8 невозможно будет адекватно обработать латиницу. Указывается только для текстовых файлов.

4-buffering. Необязательный аргумент, устанавливающий режим буферизации. По умолчанию = -1.
Может принимать следующие значения:
0 - отключение буферизации (работает только в бинарном режиме)
1 - построчная буферизация (только для текстового режима)
int (целое число > 1) Устанавливает размер буфера в байтах
-1 - значение по умолчанию
Если значение buffering не установлено, то в текстовом режиме используется построчная буферизация, а в бинарном - буферизация кусками установленного размера.

5-error. Используется только в текстовом режиме и указывает каким именно образом должны обрабатываться ошибки кодирования/декодирования.
Может принимать следующие значения:
strict - бросает исключение ValueError, если есть ошибка кожирования/декодирования. Аналог None.
ignore - игнорирует ошибки. Может привести к потере данных.
replace - вставляет символ ? на место символов, отсутствующих в кодировке.
surrogateescape - заменяет символы, отсутсвующие в кодировке на символы Unicode в диапазоне от U+DC80 до U+DCFF.
xmlzharrefreplace - поддерживается только при записи. Заменяет символы, отсутствующие в кодировке ссылкой на символ XML.
backslashreplace - заменяет символы, отсутсвующие в кодировке на escape-последовательности Python с обратной косой чертой.
namereplace - поддерживается только при записи. Заменяет символы, отсутствующие в кодировке на escape-последовательности Python.

6-newline. Работает только с текстовым режимом. Контролирует работу режима новой строки.

7-closefd. Аргумент, отвечающий за закрытие файла. При работе с файловым дескриптором и установке в False файл, после окончания работы, может оставаться открытым.
При работе с именем файла (путём к файлу) должен быть установлен в True, иначе возникнет ошибка.

8-opener. По умолчанию None. Может принимать функцию, которая получает два аргумента - file и flags и возвращает открытый дескриптор файла.

Функция open возвращает объект.
Для текстового режима возвращается экземпляр класса _io.TextIOWrapper. MRO выглядит так: "<class '_io.TextIOWrapper'>, <class '_io._TextIOBase'>, <class '_io._IOBase'>, <class 'object'>"
Для бинарного - io.BufferedIOBase. MRO выгдядит так: <class 'io.BufferedIOBase'>, <class '_io._BufferedIOBase'>, <class 'io.IOBase'>, <class '_io._IOBase'>, <class 'object'>
В режиме чтения бинарного файла класс изменится на io.BufferedReader, в режиме записи - на io.BufferedWriter, в режиме чтения/записи - на io.BufferedRandom.
То есть функция open по сути является конструктором класса (хотя в доке указано, что явный конструктор у данных подклассов отсутствует).

Далее, функция open возвращает объект, который представляет собой открытый и готовый к работе файл.
После работы с файлом настоятельно рекомендуется его закрывать при помощи метода f.close().
То есть формально псевдокод можно определить так:
`open(file)
работа с файлом...
file.close()`
Во избежание написания такой конструкции, для снижения вероятности забыть закрыть файл и для более безопасной работы с файлами в Python наличествует контекстный менеждер with.
`with open(file) as f:
    работа с файлом...`

Возвращаемый функцией open объект обладает, помимо уже названных, некоторыми методами и свойствами:
f.readable() - возвращает True, если файл может быть прочитан и False - если нет.
f.read(size = -1) - возвращает указанное количество байт из файла. По умолчанию - -1, то есть весь файл.
f.readline(size = -1) - возвращает указанное количество байт из строки. По умолчанию - -1, то есть всю строку.
f.readlines(hint = -1) - возвращает список всех строк файла. Необязательный параметр hint указывает количество байт. Если количество байт в списке превышает указанное, то строки больше не возвращаются.

f.writable() - возвращает True, если в файл можно записывать и False - если нет. Файл считается доступным для записи, если он открыт при помощи mode=a или mode=w.
f.write(arg) - записывает в файл arg (bytes or str). В случае открытия файла с mode=w файл будет перезаписан, а в случае с mode=a запись будет вставлена по умолчанию в конец файла.
f.writelines(list) - записывает в файл все строки переданного списка строк. В остальном действует аналогично предыдущему методу.

f.seek(offset) - устанавливает текущую позицию работы с файлом. (В режиме текстовой записи при отсутствии файла создаёт нечитаемый файл. Гипотеза...)
f.tell() - возвращает текущую позицию работы с файлом.
f.seekable() - возвращает True, усли файл доступен для поиска и False, если нет.
f.truncate(size) - урезает размер файла до указанного количества байт.
f.fileno() - возвращает файловый дескриптор в потоке.
f.flush() - очищает внутренний буфер.
f.isatty() - возвращает True, если файловый поток является интерактивным (например подключён к терминалу) и False, если нет. Указывается, что метод работает только для терминальных устройств и не является надёжным.
f.detatch() - возвращает отделённый необработанный поток из буфера.

Также для работы с файловой системой применяется встроенный модуль os, в котором наличествуют следующие методы:
os.getcwd() - возвращает текущий рабочий каталог.
os.getcwdb() - возвращает текущий рабочий каталог в бинарном формате.
os.mkdir(folder_name) - создаёт в текущей рабочей директории новую папку с переданным именем. Если папка с таким именем уже есть в текущей директории, то будет выброшена ошибка FileExistError.
os.chdir(folder_name) - изменяет имя текущей директории.
os.makedirs(folder_names) - рекурсивно создаёт вложенные директории. Принимает строку наподобие 'folder1/folder2/folder3'.
os.rename(old_name, new_name) - изменяет имя папки или файла.
os.replace(old_path, new_path) - перемещает файл или папку по указанному пути.
os.listdir(path) - возвращает имена всех файлов и папок директории, заданной в path.
os.remove(file_name) - удаляет указанный файл.
os.rmdir(folder_name) - удаляет указанную директорию.
os.removedirs(file_names) - рекурсивно удаляет указанные вложенные директории, но только пустые.
os.walk(arg) - принимает начальное положение, которое интепретируется как корневой элемент дерева директорий. Возвращает генератор дерева директорий.
Пример кода:
`for dir_path, dir_names, file_names in walk('.'):
    работа с файловой системой...`
os.stat(file_name, *, dir_fd=None, follow_symlinks=True) - возвращает объект stat_result, в котором содержится статическая информация о файле.
os.chdir(abs_path) - осуществляет переход в указанную директорию.

Для манипулирования путями к файлам или директориям используется подмодуль модуля os - os.path.
К примеру:
os.path.abspath(path) - возвращает абсолютный путь к файлу или папке.
os.path.getatime(path) - возвращает время последнего доступа к пути в количестве секунд с начала эпохи, то есть с первого января 1970-ого года.
os.path.getmtime(path) - возвращает время последнего изменения пути в количестве секунд с начала эпохи.
os.path.getsize(path) - возвращает размер пути в байтах.
os.path.isfile(file) - проверяет файл на существование
os.path.exist(path) - проверяет путь на существование

Также для более высокоуровневого манипулирования путями используется отдельный модуль pathlib.