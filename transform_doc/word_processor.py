#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ python-docx
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
"""

import os
import traceback
from datetime import datetime
from typing import Dict, List
from dotenv import load_dotenv

from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT

from mylogger import Logger
from llm import OpenRouterClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

class WordProcessor:
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.document = None
        self.logger = Logger('WordProcessor', 'logs/word_processor.log')
        self.logger.info("WordProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_document(self, filepath: str) -> 'WordProcessor':
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        print(f"üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {filepath}")
        self.logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {filepath}")
        try:
            self.document = Document(filepath)
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {filepath}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filepath}: {e}")
            raise
        return self
    
    def process_document(self, input_filepath: str, prompt: str, llm_client=None) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é LLM: —á–∏—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –º–æ–¥–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            input_filepath: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ docs/)
            prompt: –ü—Ä–æ–º—Ç –¥–ª—è LLM –º–æ–¥–µ–ª–∏
            llm_client: –ö–ª–∏–µ–Ω—Ç LLM (OpenAIClient)
        
        Returns:
            –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        if not input_filepath.startswith('docs/'):
            input_filepath = f"docs/{input_filepath}"
        
        if not os.path.exists(input_filepath):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_filepath}")
        
        print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {input_filepath}")
        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: {input_filepath}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        self.load_document(input_filepath)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_text = self._extract_text_from_document()
        self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –¥–ª–∏–Ω–∞: {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
        if llm_client:
            print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ LLM...")
            self.logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ LLM")
            modified_text = self._process_with_llm(document_text, prompt, llm_client)
            if modified_text:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                self.logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç LLM –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É")
                self._apply_llm_changes(modified_text)
            else:
                print("‚ùå LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                self.logger.error("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
        else:
            print("‚ùå LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            self.logger.error("LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: "new_" + —Å—Ç–∞—Ä–æ–µ –∏–º—è
        base_name = os.path.basename(input_filepath)
        output_filename = f"new_{base_name}"
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ new_docs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("new_docs", exist_ok=True)
        output_path = f"new_docs/{output_filename}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        self.save_document(output_path)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_path}")
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {output_path}")
        return output_path
    
    def _extract_text_from_document(self) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        text_parts = []
        self.element_markers = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ)
        for i, paragraph in enumerate(self.document.paragraphs):
            marker = f"PARA_{i:04d}"
            self.element_markers.append(('paragraph', i, marker))
            text_parts.append(f"[{marker}] {paragraph.text.strip()}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü (–ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ —è—á–µ–π–∫—É)
        table_idx = 0
        for table in self.document.tables:
            for row_idx, row in enumerate(table.rows):
                for cell_idx, cell in enumerate(row.cells):
                    marker = f"CELL_{table_idx:02d}_{row_idx:02d}_{cell_idx:02d}"
                    self.element_markers.append(('table_cell', table_idx, row_idx, cell_idx, marker))
                    cell_text = cell.text.strip()
                    text_parts.append(f"[{marker}] {cell_text}")
            table_idx += 1
        
        self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(text_parts)} (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(self.document.paragraphs)}, —Ç–∞–±–ª–∏—Ü: {len(self.document.tables)})")
        return "\n".join(text_parts)
    
    
    def _process_with_llm(self, document_text: str, prompt: str, llm_client) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ LLM –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ LLM")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            original_lines = document_text.split('\n')
            line_count = len(original_lines)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º—Ç
            full_prompt = f"""
{prompt}

–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—Å–µ–≥–æ {line_count} —Å—Ç—Ä–æ–∫):
{document_text}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
1. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
2. –°–æ—Ö—Ä–∞–Ω–∏ –¢–û–ß–ù–û {line_count} —Å—Ç—Ä–æ–∫ - –Ω–∏ –±–æ–ª—å—à–µ, –Ω–∏ –º–µ–Ω—å—à–µ
3. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
4. –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ, –æ—Å—Ç–∞–≤—å –µ—ë –ø—É—Å—Ç–æ–π
5. –ù–µ –¥–æ–±–∞–≤–ª—è–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
6. –ù–µ –∏–∑–º–µ–Ω—è–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
7. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
8. –ù–ï —Ä–∞–∑–±–∏–≤–∞–π –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
9. –ù–ï –æ–±—ä–µ–¥–∏–Ω—è–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É
10. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
11. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã [PARA_XXXX] –∏ [CELL_XX_XX_XX] –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
12. –ò–∑–º–µ–Ω—è–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞, –ù–ï —Ç—Ä–æ–≥–∞–π —Å–∞–º –º–∞—Ä–∫–µ—Ä
"""
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = llm_client.prepare_messages(full_prompt)
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM, –¥–ª–∏–Ω–∞ –ø—Ä–æ–º—Ç–∞: {len(full_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = llm_client.generate(messages)
            
            if result and result[0]:
                modified_text = result[0]
                self.logger.info(f"LLM –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–ª–∏–Ω–∞: {len(modified_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                lines = modified_text.split('\n')
                self.logger.info(f"LLM –≤–µ—Ä–Ω—É–ª {len(lines)} —Å—Ç—Ä–æ–∫")
                for i, line in enumerate(lines[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    self.logger.info(f"–°—Ç—Ä–æ–∫–∞ {i+1}: '{line}'")
                if len(lines) > 5:
                    self.logger.info(f"... –∏ –µ—â–µ {len(lines) - 5} —Å—Ç—Ä–æ–∫")
                
                return modified_text
            else:
                print("‚ùå LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                self.logger.error("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LLM: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LLM: {e}")
            return None
    
    def _apply_llm_changes(self, modified_text: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç LLM –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç LLM...")
        self.logger.info(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç LLM, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(modified_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –†–∞–∑–±–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        modified_lines = [line.rstrip() for line in modified_text.split('\n')]
        self.logger.info(f"LLM –≤–µ—Ä–Ω—É–ª {len(modified_lines)} —Å—Ç—Ä–æ–∫")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
        marker_to_text = {}
        lines_without_markers = []
        
        for i, line in enumerate(modified_lines):
            if line.startswith('[') and ']' in line:
                marker_end = line.find(']')
                marker = line[1:marker_end]
                text_content = line[marker_end + 1:].strip()
                marker_to_text[marker] = text_content
            else:
                # Fallback –¥–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
                lines_without_markers.append((i, line))
                self.logger.warning(f"–°—Ç—Ä–æ–∫–∞ {i+1} –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞: {line[:50]}...")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        expected_elements = len(self.element_markers)
        actual_elements = len(modified_lines)
        
        if expected_elements != actual_elements:
            error_msg = f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_elements}, –ø–æ–ª—É—á–µ–Ω–æ {actual_elements}"
            self.logger.error(error_msg)
            raise ValueError(error_msg)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è fallback
        use_fallback = len(lines_without_markers) > 0
        if use_fallback:
            self.logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º –¥–ª—è {len(lines_without_markers)} —Å—Ç—Ä–æ–∫ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤")

        paragraphs_updated = 0
        tables_updated = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ (fallback)
        line_index = 0
        for element_info in self.element_markers:
            if element_info[0] == 'paragraph':
                _, para_idx, marker = element_info
                if marker in marker_to_text:
                    new_text = marker_to_text[marker]
                elif use_fallback and line_index < len(modified_lines):
                    new_text = modified_lines[line_index]
                    self.logger.info(f"Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {para_idx}")
                else:
                    self.logger.warning(f"–ú–∞—Ä–∫–µ—Ä {marker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM")
                    continue
                
                paragraph = self.document.paragraphs[para_idx]
                self._update_paragraph_text(paragraph, new_text)
                paragraphs_updated += 1
            
            elif element_info[0] == 'table_cell':
                _, table_idx, row_idx, cell_idx, marker = element_info
                if marker in marker_to_text:
                    new_text = marker_to_text[marker]
                elif use_fallback and line_index < len(modified_lines):
                    new_text = modified_lines[line_index]
                    self.logger.info(f"Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —è—á–µ–π–∫–∏ {table_idx}-{row_idx}-{cell_idx}")
                else:
                    self.logger.warning(f"–ú–∞—Ä–∫–µ—Ä {marker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM")
                    continue
                
                table = self.document.tables[table_idx]
                cell = table.rows[row_idx].cells[cell_idx]
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —è—á–µ–π–∫–µ
                for paragraph in cell.paragraphs:
                    self._update_paragraph_text(paragraph, new_text)
                tables_updated += 1
            
            line_index += 1

        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {paragraphs_updated}, —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü: {tables_updated}")
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç LLM –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    def apply_changes(self, changes: Dict[str, str]) -> 'WordProcessor':
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        changes_made = 0
        
        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for paragraph in self.document.paragraphs:
            if paragraph.text.strip():
                original_text = paragraph.text
                new_text = original_text
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
                for old_text, new_text_replacement in changes.items():
                    if old_text in new_text:
                        new_text = new_text.replace(old_text, new_text_replacement)
                        print(f"  üîÑ –ó–∞–º–µ–Ω—è–µ–º: '{old_text}' -> '{new_text_replacement}'")
                        changes_made += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if new_text != original_text:
                    self._update_paragraph_text(paragraph, new_text)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table in self.document.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        if paragraph.text.strip():
                            original_text = paragraph.text
                            new_text = original_text
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
                            for old_text, new_text_replacement in changes.items():
                                if old_text in new_text:
                                    new_text = new_text.replace(old_text, new_text_replacement)
                                    print(f"  üîÑ –í —Ç–∞–±–ª–∏—Ü–µ –∑–∞–º–µ–Ω—è–µ–º: '{old_text}' -> '{new_text_replacement}'")
                                    changes_made += 1
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                            if new_text != original_text:
                                self._update_paragraph_text(paragraph, new_text)
        
        print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {changes_made} –∑–∞–º–µ–Ω")
        return self
    
    def _update_paragraph_text(self, paragraph, new_text: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if paragraph.runs:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ run
            first_run = paragraph.runs[0]
            first_run.text = new_text
            
            # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ runs
            for run in paragraph.runs[1:]:
                run.text = ''
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç runs, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            paragraph.text = new_text
    
    def save_document(self, output_path: str) -> 'WordProcessor':
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {output_path}")
        self.logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {output_path}")
        try:
            self.document.save(output_path)
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {output_path}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {output_path}: {e}")
            raise
        return self
    
    def show_document_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
        print("-" * 40)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        paragraphs = [p for p in self.document.paragraphs if p.text.strip()]
        tables = self.document.tables
        
        print(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(paragraphs)}")
        print(f"–¢–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        for i, paragraph in enumerate(paragraphs[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"\n–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}:")
            print(f"  –¢–µ–∫—Å—Ç: {paragraph.text[:50]}...")
            print(f"  –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {paragraph.alignment}")
            
            if paragraph.runs:
                print("  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
                for j, run in enumerate(paragraph.runs):
                    if run.text.strip():
                        print(f"    Run {j+1}: –∂–∏—Ä–Ω—ã–π={run.bold}, –∫—É—Ä—Å–∏–≤={run.italic}")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å LLM"""
    print("üîß –ü–†–û–¶–ï–°–°–û–† WORD –î–û–ö–£–ú–ï–ù–¢–û–í –° LLM")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = WordProcessor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ docs
        docs_files = [f for f in os.listdir("docs") if f.endswith(('.docx', '.doc'))]
        
        if not docs_files:
            print("üìÅ –ü–∞–ø–∫–∞ docs –ø—É—Å—Ç–∞. –ü–æ–º–µ—Å—Ç–∏—Ç–µ .docx —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É docs/ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            print("üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print("   from word_processor import WordProcessor")
            print("   from llm import OpenRouterClient")
            print("   processor = WordProcessor()")
            print("   llm_client = OpenRouterClient()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API_KEY –∏–∑ env")
            print("   result = processor.process_document('–º–æ–π_—Ñ–∞–π–ª.docx', '–ø—Ä–æ–º—Ç –¥–ª—è LLM', llm_client)")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_file = docs_files[0]
        print(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {demo_file}")
        
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞ –¥–ª—è LLM
        prompt = """
–ò–∑–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
1. –ó–∞–º–µ–Ω–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è" –Ω–∞ "—Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"
2. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–í–µ—Ä–Ω–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º.
"""
        
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å LLM –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   2. –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä OpenRouterClient")
        print("   3. –ü–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ process_document()")
        print("\nüìù –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞:")
        print(prompt)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ LLM (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        print(f"\nüîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã–∑–æ–≤–∞:")
        print(f"   processor.process_document('{demo_file}', prompt, llm_client)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
