#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ python-docx
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
"""

import os
import traceback
from datetime import datetime
from typing import Dict, List

from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT

class WordProcessor:
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.document = None
    
    def load_document(self, filepath: str) -> 'WordProcessor':
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        print(f"üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {filepath}")
        self.document = Document(filepath)
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return self
    
    def process_document(self, input_filepath: str, changes: Dict[str, str], output_filename: str = None) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç: —á–∏—Ç–∞–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ new_docs
        
        Args:
            input_filepath: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ docs/)
            changes: –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω {—Å—Ç–∞—Ä—ã–π_—Ç–µ–∫—Å—Ç: –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç}
            output_filename: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
        Returns:
            –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        if not input_filepath.startswith('docs/'):
            input_filepath = f"docs/{input_filepath}"
        
        if not os.path.exists(input_filepath):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_filepath}")
        
        print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {input_filepath}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        self.load_document(input_filepath)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.apply_changes(changes)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not output_filename:
            base_name = os.path.splitext(os.path.basename(input_filepath))[0]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"{base_name}_processed_{timestamp}.docx"
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ new_docs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("new_docs", exist_ok=True)
        output_path = f"new_docs/{output_filename}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        self.save_document(output_path)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_path}")
        return output_path
    
    def apply_changes(self, changes: Dict[str, str]) -> 'WordProcessor':
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        changes_made = 0
        
        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for paragraph in self.document.paragraphs:
            if paragraph.text.strip():
                original_text = paragraph.text
                new_text = original_text
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
                for old_text, new_text_replacement in changes.items():
                    if old_text in new_text:
                        new_text = new_text.replace(old_text, new_text_replacement)
                        print(f"  üîÑ –ó–∞–º–µ–Ω—è–µ–º: '{old_text}' -> '{new_text_replacement}'")
                        changes_made += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if new_text != original_text:
                    self._update_paragraph_text(paragraph, new_text)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table in self.document.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        if paragraph.text.strip():
                            original_text = paragraph.text
                            new_text = original_text
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
                            for old_text, new_text_replacement in changes.items():
                                if old_text in new_text:
                                    new_text = new_text.replace(old_text, new_text_replacement)
                                    print(f"  üîÑ –í —Ç–∞–±–ª–∏—Ü–µ –∑–∞–º–µ–Ω—è–µ–º: '{old_text}' -> '{new_text_replacement}'")
                                    changes_made += 1
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                            if new_text != original_text:
                                self._update_paragraph_text(paragraph, new_text)
        
        print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {changes_made} –∑–∞–º–µ–Ω")
        return self
    
    def _update_paragraph_text(self, paragraph, new_text: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if paragraph.runs:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ run
            first_run = paragraph.runs[0]
            first_run.text = new_text
            
            # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ runs
            for run in paragraph.runs[1:]:
                run.text = ''
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç runs, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            paragraph.text = new_text
    
    def save_document(self, output_path: str) -> 'WordProcessor':
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {output_path}")
        self.document.save(output_path)
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return self
    
    def show_document_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if not self.document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
        print("-" * 40)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        paragraphs = [p for p in self.document.paragraphs if p.text.strip()]
        tables = self.document.tables
        
        print(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(paragraphs)}")
        print(f"–¢–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        for i, paragraph in enumerate(paragraphs[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"\n–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}:")
            print(f"  –¢–µ–∫—Å—Ç: {paragraph.text[:50]}...")
            print(f"  –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {paragraph.alignment}")
            
            if paragraph.runs:
                print("  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
                for j, run in enumerate(paragraph.runs):
                    if run.text.strip():
                        print(f"    Run {j+1}: –∂–∏—Ä–Ω—ã–π={run.bold}, –∫—É—Ä—Å–∏–≤={run.italic}")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    print("üîß –ü–†–û–¶–ï–°–°–û–† WORD –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = WordProcessor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ docs
        docs_files = [f for f in os.listdir("docs") if f.endswith(('.docx', '.doc'))]
        
        if not docs_files:
            print("üìÅ –ü–∞–ø–∫–∞ docs –ø—É—Å—Ç–∞. –ü–æ–º–µ—Å—Ç–∏—Ç–µ .docx —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É docs/ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            print("üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print("   processor = WordProcessor()")
            print("   changes = {'—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç': '–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç'}")
            print("   result = processor.process_document('–º–æ–π_—Ñ–∞–π–ª.docx', changes)")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_file = docs_files[0]
        print(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {demo_file}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è LLM)
        changes = {
            '–û–û–û "–¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø"': '–û–û–û "–ù–û–í–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø"',
            '–ò–ü –ò–í–ê–ù–û–í –ò–í–ê–ù –ò–í–ê–ù–û–í–ò–ß': '–ò–ü –ü–ï–¢–†–û–í –ü–ï–¢–† –ü–ï–¢–†–û–í–ò–ß',
            '1234567890': '1111111111',
            '0987654321': '2222222222',
            '100 000': '150 000',
            '25 000': '30 000',
            '175 000': '200 000',
            '—Å—Ç–æ —Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å —Ç—ã—Å—è—á': '–¥–≤–µ—Å—Ç–∏ —Ç—ã—Å—è—á'
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        result_file = processor.process_document(demo_file, changes)
        
        print("\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("‚úÖ –§–∞–π–ª—ã:")
        print(f"   - –ò—Å—Ö–æ–¥–Ω—ã–π: docs/{demo_file}")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π: {result_file}")
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
